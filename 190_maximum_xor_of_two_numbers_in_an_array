class Solution {
    struct Node{
        Node *links[2];
        bool contains(int index){
            return links[index];
        }
        Node* get(int index){
            return links[index];
        }
        void put(int index,Node *node){
            links[index]=node;
        }
    };
    class Trie{
        Node *root;
    public:
        Trie(){
            root=new Node();
        }
        void insert(int num){
            Node *node=root;
            for(int i=31;i>=0;i--){
                int bit=(num>>i)&1;
                if(!node->contains(bit)){
                    node->put(bit,new Node());
                }
                node=node->get(bit);
            }
        }
        int mx(int num){
            Node *node=root;
            int mxnum=0;
            for(int i=31;i>=0;i--){
                int bit=(num>>i)&1;
                if(node->contains(!bit)){
                    mxnum=mxnum|(1<<i);
                    node=node->get(!bit);
                }
                else node=node->get(bit);
            }
            return mxnum;
        }
    };
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie trie;
        for(int i=0;i<nums.size();i++) trie.insert(nums[i]);
        int ans=0;
        for(int i=0;i<nums.size();i++) ans=max(ans,trie.mx(nums[i]));
        return ans;
    }
};