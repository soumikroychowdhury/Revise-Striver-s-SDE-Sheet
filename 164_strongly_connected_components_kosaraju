#include<bits/stdc++.h>
void dfs(int node,vector<vector<int>> &adj,vector<int> &vis,stack<int> &s){
    vis[node]=1;
    for(auto i:adj[node]) if(!vis[i]) dfs(i,adj,vis,s);
    s.push(node);
}
void dfs(int node,vector<vector<int>> &adj,vector<int> &vis,vector<int> &v){
    vis[node]=1;
    v.push_back(node);
    for(auto i:adj[node]) if(!vis[i]) dfs(i,adj,vis,v);
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    vector<vector<int>> adj(n);
    for(int i=0;i<edges.size();i++){
        adj[edges[i][0]].push_back(edges[i][1]);
    }
    vector<int> vis(n,0);
    stack<int> s;
    for(int i=0;i<n;i++){
        if(!vis[i]) dfs(i,adj,vis,s);
    }
    vector<vector<int>> adjt(n);
    for(int i=0;i<n;i++){
        vis[i]=0;
        for(auto it:adj[i]){
            adjt[it].push_back(i);
        }
    }
    vector<vector<int>> ans;
    vector<int> v;
    while(!s.empty()){
        int node=s.top();
        s.pop();
        v.clear();
        if(!vis[node]) dfs(node,adjt,vis,v);
        ans.push_back(v);
    }
    return ans;
}