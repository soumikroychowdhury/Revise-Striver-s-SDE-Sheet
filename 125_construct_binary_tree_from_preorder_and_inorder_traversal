/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* tree(vector<int> &preorder,vector<int> &inorder,int prestart,int preend,int instart,int inend,map<int,int> &m){
        if(prestart>preend||instart>inend) return NULL;
        TreeNode *root=new TreeNode(preorder[prestart]);
        int a=m[root->val];
        int b=a-instart;
        root->left=tree(preorder,inorder,prestart+1,prestart+b,instart,a-1,m);
        root->right=tree(preorder,inorder,prestart+b+1,preend,a+1,inend,m);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int prestart=0,preend=preorder.size()-1,instart=0,inend=inorder.size()-1;
        map<int,int> m;
        for(int i=instart;i<=inend;i++) m[inorder[i]]=i;
        return tree(preorder,inorder,prestart,preend,instart,inend,m);
    }
};