#include <bits/stdc++.h>
struct Node{
    Node *links[26];
    bool flag=false;
    bool contains(char ch){
        return links[ch-'a'];
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,Node *node){
        links[ch-'a']=node;
    }
    void se(){
        flag=true;
    }
    bool isend(){
        return flag;
    }
};
class Trie{
    Node* root;
public:
    Trie(){
        root=new Node();
    }
    void insert(string word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i])) node->put(word[i],new Node());
            node=node->get(word[i]);
        }
        node->se();
    }
    bool prefix(string word){
        bool flag=true;
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->contains(word[i])){
                node=node->get(word[i]);
                if(!node->isend()) return false;
            }
            else return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    Trie trie;
    for(auto &it:a){
        trie.insert(it);
    }
    string ans="";
    for(auto &it:a){
        if(trie.prefix(it)){
            if(it.size()>ans.size()||(it.size()==ans.size()&&it<ans)) ans=it;
        }
    }
    return ans==""?"None":ans;
}