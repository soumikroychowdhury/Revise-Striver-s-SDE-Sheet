#include <bits/stdc++.h>
long long merge(long long *arr,long long *temp,int left,int mid,int right){
    int i=left,j=mid,k=left,countInversions=0;
    while((i<mid)&&(j<=right)){
        if(arr[i]<arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            countInversions+=(mid-i);
        }
    }
    while(i<mid) temp[k++]=arr[i++];
    while(j<=right) temp[k++]=arr[j++];
    for(int i=left;i<=right;i++) arr[i]=temp[i];
    return countInversions;
}
long long mergeSort(long long *arr,long long *temp,int left,int right){
    int mid=0,countInversions=0;
    if(left<right){
        mid=left+(right-left)/2;
        countInversions+=mergeSort(arr,temp,left,mid);
        countInversions+=mergeSort(arr,temp,mid+1,right);
        countInversions+=merge(arr,temp,left,mid+1,right);
    }
    return countInversions;
} 
long long getInversions(long long *arr, int n){
    long long temp[n];
    return mergeSort(arr,temp,0,n-1);
}