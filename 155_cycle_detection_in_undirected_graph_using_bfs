#include<bits/stdc++.h>
bool detect(int source,vector<vector<int>> &adj,vector<int> &vis){
    vis[source]=1;
    queue<pair<int,int>> q;
    q.push({source,-1});
    while(!q.empty()){
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto adjacent:adj[node]){
            if(!vis[adjacent]){
                vis[adjacent]=1;
                q.push({adjacent,node});
            }
            else if(adjacent!=node) return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<vector<int>> adj(n);
    for(int i=0;i<m;i++){
        int a=edges[i][0]-1,b=edges[i][1]-1;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    vector<int> vis(n,0);
    for(int i=0;i<n;i++){
        if(!vis[i]) if(detect(i,adj,vis)) return "Yes";
    }
    return "No";
}