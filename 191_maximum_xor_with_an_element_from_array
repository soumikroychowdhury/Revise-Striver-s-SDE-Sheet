class Solution {
    struct Node{
        Node *links[2];
        bool contains(int index){
            return links[index];
        }
        Node* get(int index){
            return links[index];
        }
        void put(int index,Node *node){
            links[index]=node;
        }
    };
    class Trie{
        Node *root;
    public:
        Trie(){
            root=new Node();
        }
        void insert(int num){
            Node *node=root;
            for(int i=31;i>=0;i--){
                int bit=(num>>i)&1;
                if(!node->contains(bit)){
                    node->put(bit,new Node());
                }
                node=node->get(bit);
            }
        }
        int mx(int num){
            Node *node=root;
            int mxnum=0;
            for(int i=31;i>=0;i--){
                int bit=(num>>i)&1;
                if(node->contains(!bit)){
                    mxnum=mxnum|(1<<i);
                    node=node->get(!bit);
                }
                else node=node->get(bit);
            }
            return mxnum;
        }
    };
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> ans(queries.size(),-1);
        vector<pair<int,pair<int,int>>> oqueries;
        sort(nums.begin(),nums.end());
        int index=0;
        for(auto &it:queries){
            oqueries.push_back({it[1],{it[0],index++}});
        }
        sort(oqueries.begin(),oqueries.end());
        int i=0,n=nums.size();
        Trie trie;
        for(auto &it:oqueries){
            while(i<n&&nums[i]<=it.first){
                trie.insert(nums[i]);
                i++;
            }
            if(i!=0) ans[it.second.second]=trie.mx(it.second.first);
        }
        return ans;
    }
};