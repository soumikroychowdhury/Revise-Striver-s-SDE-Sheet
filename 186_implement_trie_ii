#include <bits/stdc++.h>
struct Node{
    Node *links[26];
    int cew=0,cpre=0;
    bool contains(char ch){
        return (links[ch-'a']!=NULL);
    }
    Node *get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,Node *node){
        links[ch-'a']=node;
    }
    void ie(){
        cew++;
    }
    void ip(){
        cpre++;
    }
    void de(){
        cew--;
    }
    void dp(){
        cpre--;
    }
    int gete(){
        return cew;
    }
    int getp(){
        return cpre;
    }
};
class Trie{
    Node *root;
    public:

    Trie(){
        root=new Node();
    }

    void insert(string &word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i])) node->put(word[i],new Node());
            node=node->get(word[i]);
            node->ip();
        }
        node->ie();
    }

    int countWordsEqualTo(string &word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->contains(word[i])) node=node->get(word[i]);
            else return 0;
        }
        return node->gete();
    }

    int countWordsStartingWith(string &word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->contains(word[i])) node=node->get(word[i]);
            else return 0;
        }
        return node->getp();
    }

    void erase(string &word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->contains(word[i])){
                node=node->get(word[i]);
                node->dp();
            }
            else return;
        }
        node->de();
    }
};
