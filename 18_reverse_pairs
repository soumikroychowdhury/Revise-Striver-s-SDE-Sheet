class Solution {
    int merge(vector<int>& nums,int low,int mid,int high){
        int count=0,j=mid;
        for(int i=low;i<mid;i++){
            while(j<=high&&(nums[i]>2LL*nums[j])) j++;
            count+=(j-mid);
        }
        vector<int> v;
        int left=low,right=mid;
        while(left<mid&&right<=high){
            if(nums[left]<nums[right]) v.push_back(nums[left++]);
            else v.push_back(nums[right++]);
        }
        while(left<mid) v.push_back(nums[left++]);
        while(right<=high) v.push_back(nums[right++]);
        for(int i=low;i<=high;i++) nums[i]=v[i-low];
        return count;
    }
    int mergesort(vector<int>& nums,int low,int high){
        if(low>=high) return 0;
        int mid=low+(high-low)/2;
        int count=mergesort(nums,low,mid);
        count+=mergesort(nums,mid+1,high);
        count+=merge(nums,low,mid+1,high);
        return count;
    }
public:
    int reversePairs(vector<int>& nums) {
        return mergesort(nums,0,nums.size()-1);
    }
};