#include<bits/stdc++.h>
bool possible(int n,vector<vector<int>> &adj){
  int indegree[n]={0};
  for(int i=0;i<n;i++){
    for(auto it:adj[i]) indegree[it]++;
  }
  queue<int> q;
  for(int i=0;i<n;i++){
    if(indegree[i]==0) q.push(i);
  }
  int count=0;
  while(!q.empty()){
    int node=q.front();
    q.pop();
    count++;
    for(auto i:adj[node]){
      indegree[i]--;
      if(indegree[i]==0) q.push(i);
    }
  }
  return count!=n;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<vector<int>> adj(n);
  for(int i=0;i<edges.size();i++){
    adj[edges[i].first-1].push_back(edges[i].second-1);
  }
  if(possible(n,adj)) return true;
  return false;
}